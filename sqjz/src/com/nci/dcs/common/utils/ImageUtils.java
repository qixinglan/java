package com.nci.dcs.common.utils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

@Service
@Transactional
public class ImageUtils{
	private static Logger logger = Logger.getLogger(ImageUtils.class);
	/**
	 * 更新图片
	 * @param imageFile 目标图片
	 * @param imageFilename	目标图片名称
	 * @param entityFilename	实体关联图片名称
	 * @return
	 * @throws IOException
	 */
	public static String save(File imageFile,String imageFilename,String entityFilename) throws IOException{
		//图片文件上传路径
		String imagePath = Constants.IMAGEPATH + Constants.SEPARATOR;
		logger.info("imagePath路径："+imagePath);
		if(imageFile!=null && imageFile.length()==0)
			return null;
		//上传图片文件
		if(StringUtils.isNotBlank(imagePath)){
			//获取上传文件的扩展名
			String postfix = FileUtils.getExtension(imageFilename);
			//图片文件名
			String random = FileUtils.getFileName();
			String fileName = PathUtils.getRealPath() + imagePath + random + postfix;
			logger.info("fileName路径："+fileName);
			//如果目标图片不为空
			if(imageFile!=null){
				//如果目标图片名称和实体已保存的图片名称不同，则删除实体关联的图片，并保存目标图片
				if(!imageFilename.equals(entityFilename)){
					String deleteFilename = imagePath+entityFilename;
					FileUtils.deleteFile(deleteFilename);
					//目标图片文件
					File destFile = new File(fileName);
					//复制图片文件
					FileUtils.copyFile(imageFile, destFile);
					
					logger.info("复制文件："+imageFile+ "到：" + destFile);
					//返回重新指定的图片名
					return random + postfix;
				}
				logger.info("复制文件："+imageFile+ "失败。");
			//如果目标图片为空
			}else{
				//如果取消实体的照片则删除实体关联的图片
//				if(entityFilename!=null){
//					FileUtils.deleteFile(imagePath+entityFilename);
//				}
				logger.info("imageFile路径为空"+imageFile);
				return entityFilename;
			}
		}
		return null;
	}
	
	//如果删除对象，则删除与之关联的图片
	public static void deleteImage(String entityFilename){
		if(!CommonUtils.isNull(entityFilename)){
			String imagePath = Constants.IMAGEPATH + Constants.SEPARATOR;
			FileUtils.deleteFile(imagePath+entityFilename);
		}
	}
	
	public static boolean createImage(String imgStr ,String imgFilePath){
		if(imgStr== null){
			return false;
		}
		BASE64Decoder decoder = new BASE64Decoder();
		try{
			byte[] bytes = decoder.decodeBuffer(imgStr);
			for(int i=0;i<bytes.length;++i){
				if(bytes[i]<0){
					bytes[i]+=256;//调整异常数据
				}
			}
			OutputStream out = new FileOutputStream(imgFilePath);
			out.write(bytes);
			out.flush();
			out.close();
			return true;
		}catch(Exception e){
			return false;
		}
	}
	public static boolean createImage(byte[] imgB ,String imgFilePath){
		try{
			byte[] bytes =imgB;
			for(int i=0;i<bytes.length;++i){
				if(bytes[i]<0){
					bytes[i]+=256;//调整异常数据
				}
			}
			OutputStream out = new FileOutputStream(imgFilePath);
			out.write(bytes);
			out.flush();
			out.close();
			return true;
		}catch(Exception e){
			return false;
		}
	}
	
	//如果删除对象，则删除与之关联的图片
		public static void deleteImageByPath(String path){
			if(!CommonUtils.isNull(path)){
				FileUtils.deleteFile(path);
			}
		}
	
	public static void main(String[] args) {
		String imgStr = "";
		File file = new File("D:/1/2/");
		if(!file.exists())
			file.mkdirs();
		String imgFilePath = "D:/1/2/1.jpeg";
		ImageUtils.createImage(imgStr, imgFilePath);
	}
	
}
